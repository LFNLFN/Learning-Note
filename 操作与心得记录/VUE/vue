JZ：1.vue在框架之中上手是最容易的，，公司也用得多，建议跟着慕课学。
    2.看文档是不需要一股脑塞。
    3.官方文档
    4.awesome-是vue的生态资源，各种组件和教程都用
      （个人PS：需要理解下这个地方怎么应付需求）
    5.微信收藏：新手向vue学习顺序
    6.学vue需要掌握的比较多，新思想也多
    7.三四个星期
    8.不懂多看文档和demo
    9.文档进阶内容划分（看照片）


--------------imooc 课程笔记
安装：
	npm i -g vue-cli
	vue init webpack my-project  //创建一个基于webpack模板的新项目
	cd my-project
	npm install
	npm run dev --localhost启动测试服务器，此功能由nodejs提供 / npm run build --生成上线目录(部署) 多了一个dist文件夹，里面有css、js、html的打包后文件，后缀有map的文件是用于调试的

msi是微软标准的意思   直接装cnpm会导致与npm版本不同步  ESLint是代码检查工具，严格模式，使用可能会导致一些奇怪问题
Karma Mocha是测试工具
export  { 变量名 } >> import { 变量名 }

脚手架工具提供了什么？文档结构、模块依赖打包、热更新(在工作区保存网页会自动更新)、本地测试服务器，集成打包上线方案

render: h => h(App) 相当于 render: function(h) { return h(App) }

在vue组件的style中设置lang=“less”即可用less

vue组件中export default{} 相当于new Vue({}) 两边的对象是同一回事，在之前import的一般就是可以使用在(传入)配置对象里面的值，比如components(template)

目前认为{{}}是只配合data使用的,里面能书写简单表达式比如num+1或者三元表达式

v-xxx 指令，看上去形式像dom属性，但是指令的值是data项的变量(值)(直接写)
v-bind:src 指令与dom属性的结合 后面一样使用"变量(值)"

v-for="(value,key) in obj"

’是什么‘放在data，’怎么做‘放在method

v-model是由限制标签使用的 v-model.lazy修饰符，使用blur或enter才行

暂时理解为{{}}(此时是不用写this的)和method里面的函数的this指向(过去式：data函数返回的那个对象) 一个对象，这个对象能把传入的参数对象的所有key的子项作为自身属性，要为那个this添加属性，必须在data注册
！！加入你用 var my = new Vue()  -----this其实就是my
Vue.set(this.list,1,{})  能在执行方法是开启双向绑定，用之前记得import Vue


v-if会把dom元素从文档流里删除，v-show不会，v-else紧跟两者之一后面，有你没我,指令值要可以返回布尔值。
	在设置了v-show/v-if/v-else的标签外(也能包裹多个)包裹内置组件<transition name="fade"></transition>可以添加css动画-透明度渐变消失,注意那个name值是自己改的
	另外过渡标签也可以包含动态组件，在组件切换时实现过渡效果，通过在过渡标签设置mode="out-in"控制出入分离进行(现在是先出后进)，注意若被包裹元素的标签名相同，要设置key属性以便vue区分(比如1,2)，否则mode会没用且不报错

		css阶段类名：v-enter v-enter-active |||  v-leave v-leave-active
		然后在style里面弄几个特殊选择器：.name-enter-active, .name-leave-active{ transition: opacity .5s ease-out }
		.name-enter, .name-leave-active { opacity: 0; }

		JS阶段：通过过渡标签里面使用指定事件监听，处理程序写在method里面，过渡元素最后要用v-bind:css="false"(如果要跳过css检测)，建议用jq写，节省代码量


v-on:click.stop 事件修改器,事件名要驼峰
	后面可以直接用js表达式：v-on:click="show = !show"

自定义指令必须v-开头，例如v-css
局部指令：使用directives:{ css: { 钩子函数 }}
全局指令：Vue.directive('css',{ 钩子函数 })



watch 与data并列的项，对象，用于监听v指令的变量

	myVal : function(val, oldVal){  }
	items: {
		handler: func,	//handler应该是该情况下的固定名字
		deep: true  //为了发现对象内部值的变化，注意监听数组的变动不需要这么做。
	},


data: 用函数返回数据对象是为了避免引用赋值

components:{
	Header,Footer  // 相当于Header:Header    变量代表后缀为vue的文件，写作标签时要全小写，驼峰变连字符
}  //在组件项传入前要先import
	另一种传入方法是var header = { template: '<p></p>', components: .. }
	还有一种是<p is="com-a">，用来遵守html规则，
		也能 :is，结合data的一个写有组件名的属性，此时的这个标签叫做动态组件，能完成类似路由的效果，使用内置标签<keep-alive></keep-alive>包住，这样假如组件发生切换，vue能缓存组件，提速

computed：{ key : func } 可以使用计算属性绑定data的数据，实时更新 {{key}} - -相当于在其他地方用v-model，甚至还能做输出前处理。
与method不同的是com里面的方法的执行条件是其中变量的改变，而meth是需要通过手动调用

props：设置在子组件用来接收父组件设置的dom属性的值   --写成字符串数组，写成对象可以附加检验功能 props:{ 'options':[Array,Number]/Number }

插槽功能：父组件temp中往子组件中写入标签后，子组件在自己的temp中写入<slot>默认值</slot>,便会在那个位置渲染出传入的标签。
具名slot：加上name属性 ---通过父组件的传入标签里头添加slot="slotName"指定在子组件中的具体出现位置

template: "<p>hello world {{ word }}</p>" --main.js only

自定义事件不用注册，$emit()方法后的参数依次为传入父级事件处理程序的参数

如果要使用jq，就在index.html里面添加脚本标签

插件：
	vue-resource--发送http请求
		步骤雷同，但不许在genvue配置 
		this.$http.get('')


	 vue-router--前端路由
		import VueRouter from 'vue-router' 然后Vue.use(VueRouter)全局注册插件，然后再let router = new VueRouter() ,  然后在根vue配置router:router

			let router = new VRouter({
				routes:[
					{
						name:'',
						mode:history, //使用了之后路由没有#
						path: '/apple',  // /apple/:color是一个变量，实际输入时要传入参数，在组件中通过this.$route.params访问(例如{{ $route.params.color }} )，实际上路由可以通过/连接写很长，只要参数前加：即可，另外添加了参数必须传，否则路由失败
						component:Apple,  //也可以 : { viewA: Apple,viewB:... }
						children: [ //设置后记得在父级路由的加载组件中加入router-view标签
							{
								path: 'red',
								component: RedApple
							}
						]
					}，
					{   //重定向
						path: '/',
						redirect: '/apple'  
					}
				]
			})
		路由更新部分用<router-view></router-view>渲染,在里面添加name属性，控制渲染组件
		<router-link :to="{path:'apple'}">to somewhere</router-link>路由线路选择器，默认解释为a标签，也可以在里面使用tag属性不用bind，例如tag="li"
		重定向类似你输入地址，他自动帮你跳转至另一个地址


	vuex：实现类似组件状态群发的功能，当组件树比较复杂时很有用
		安装是import，再Vue.use(..),再实例化(最后也要在根vue注册)：
		let store = new Vuex.store({
			state: {
				totalPrice: 0			
			},
			mutations: {
				increment (state,price) {
					state.totalPrice += price
				},
				decrement (state,price) {
					state.totalPrice -= price
				}
			}
		})
		通过this.$store.state.totalPrice
	

组件树

看后总结：
实例 》 组件 》 指令》选项》模板渲染》事件绑定》计算属性》内置动画》组件交互》路由