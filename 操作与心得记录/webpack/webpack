三个网址
    直接上手ryf教程（wp1  //$ npm i -g webpack@1.x webpack-dev-server@1.x   >>webpack-dev-server>>Visit http://127.0.0.1:8080 with your browser.
    文档查阅
    awesome：更深入了解时

三四天完成~

JZ:1.模块化就是一个模块实现一个独立功能，最后整个项目再由这些小模块组装成一个WEBAPP
   2.模块化有很多种规范，node（服务器端）用的是CommonJS，前端主流是es6模块化，
   当然还有require.js这些。
   3.觉得吃力的话在慕课网买个实战课程跟着学。

----------------------imooc 1-2
操作记录
	1.进入命令行
	2.库克隆好之后在进入，于命令行工具npm init，填写相应的资料信息，生成packagejson
	3.npm install webpack --save-dev  一般下载操作返回了目录图就代表成功了

	可输入： 编辑器名字 ./  直接用编辑器打开文件目录

	4.编辑好了js文件后，输入 webpack hello.js hello.bundle.js
		然后如果你在下方返回的文件列表看到hello.bundle.js说明打包成功了 ---Hash个人理解为此次打包操作的id

	进入打包后生成的文件，前方是内置函数，在文件底部可以看到源文件内容，上方的注释内有对该模块的数字编号，目前认为编号是反向的

	在一个js文件之中引用另一个js文件做依赖时，在文件内最前方输入require('./...js');此语句属于commonJS规范

	webpack是不能直接处理js以外的文件的，所以要下载对应的loader
		比如 npm install css-loader style-loader --save-dev  //css与styleloader一起用才能处理css文件，同时在依赖文件处也要指定loader，例如 require('style-loader!css-loader! ./style.css'),  在依赖文件中也能找到对应的css文件内容,cssloader是处理文件后缀，styleloader是将样式应用到页面上，  简写是在命令行用 --module-bind 'css=style-loader!css-loader'



命令行输入webpack 可以查看所有--参数
	自动更新：在webpack命令后使用 --watch
	显示打包过程百分比： --progress
	显示被打包文件：--display-modules
	显示需要打包某个文件的原因  --display-reasons


----------------------imooc 2-1 
打包产物放在dist文件夹之中，dist位于第一层

创建webpack.config.js (处于第一层) //文档中的configuration中查看细节，命令行webpack工具会默认使用此文件的配置参数，就不必总是在命令行中指定了

webpack.config.js文件内容：
	开头写 module.exports = {}  	此语句规范是commonJS，参数写于花括号内，实则就是输出个配置信息对象，配置好以后直接输入webpack回车就行了，如果想使用指定的配置文件：webpack --config webpack.dev.config.js

	简化命令行输入：在packagejson的"script"里面添加"webpack":"webpack --config webpack.config.js --progress --display-module --display-reasons --color" 以后再命令行直接用npm run webpack就行

	参数：
		context: __dirname,  //其实这个值是默认的
		entry: './src/script/main.js',  //打包入口文件
		output: {
			path: './dist/js',   //打包产物的存放地址
			filename: 'bundle.js'  //打包产物的名字
		}


----------------------imooc 2-1 
entry:[] / {} / ''
output: filename------'[name/hash/checkhash]-[hash].js'----入口文件前面的属性名/打包结果第一行/??


----------------------imooc 3-1 使用插件，插件参数可以在npm网查
此时面临一个问题那便是html链接的脚本名是不确定的，如何解决？那就是使用npm install html-webpack-plugin --save-dev
下载完成后在配置文件最上方引入 var htmlWebpackPlugin = require('html-webpack-plugin');
同时记得在配置对象中添加plugins:[] 然后在里面实例化，例如new htmlWebpackPlugin()
但是这样做之后只是在path中生成相应的index.html，与原来的index.html并没有联系，这时应该向构造函数里面传参:{template:'index.html'},与配置对象的context属性有关，它的值默认为项目根目录，不过还是在path里面生成index.html，
有一个小窍门就是把path的子地址加入到output:filename之中，比如js/name,
另外构造函数还可以传入filename，指定此插件输出的html文件名; 还有传入inject，指定脚本标签插入位置('head'还是'body');
传入title，然后在模板html文件内输入 <title><%= htmlWebpackPlugin.options.title %> 就可以引入title的值，类似用法还有在body里面用<%= htmlWebpackPlugin.options.属性名 %> 会进行渲染

传入minify: { removeComments: true, collapseWhitespace: true }

<% %> 里面先加=是读取值，不加等号就是直接运行js代码，注意在html模板文件任意“”一个地方出现都会被js化解析

output对象下:	publicPath: 'http//..../'  //生成的那个引用了打包文件的html的位置， 这个操作能够满足上线需求


----------------------imooc 3-3 多页面配置
新建多个new htmlWebpackPlugin()，设置里面参数即可，脚本路径获取可使用htmlWebpackPlugin.files.chunks.a.entry , 当然有一种简化方法就是传入参数chunks:['chunk-name','']，然后inject记得开，比如设置为'body'。反选方法是excludeChunks:[]


----------------------imooc 4  loader的学习
src + app.js > components

ES6语句： import layer from './...';  //一个代码块的运行方式依赖于import进来的程序，如果该代码块也被其它文件引用的话，该文件结尾要填写输出: export default layer;

关于components下的子组件的组织形式，一种是把html,css,js放在一个文件夹内，对应页面的某一个部分

module: {
	loaders: [
		{
			test: /\.js$/,
			loader: 'babel-loader'，
			query: {
				presets: ['latest'/'es2015'/...]
			}
		}
	]

----------------babel---------------------------
安装babel-loader：
	1.上babel官网，点setup--1.choose your tool > webpack
	2.npm install --save-dev babel-loader babel-core

preset项的值代表babel的插件，在页面的plugin可以查看到
设置preset也可以在packageJSON里面："babel": { "preset": ["latest"] }
这样就不必在配置文件里面设置了

安装babel插件: npm i --save-dev babel-preset-latest
安装后就可以直接在配置文件里面用，不用考虑路径问题

babel-loader 其实是很耗时的，如何优化打包时间呢？
	在loader对象里面配置exclude: './node_modules/'
						include: '.....'  //值的表示方式很多，值得一提是要用绝对路径才有用
	那么如何产生绝对路径呢？引入nodejs里面的path：var path = require('path');  然后 loader: [ path.resolve(__dirname,'app/src') ] 此方法返回绝对路径，此时 exclude: path.resolve(__dirname, 'node_modules/')

	
------------4.4 css
入口文件app.js 最上方引入: import './css/common.css';
	{
			test: /\.css$/,
			loader: 'style-loader!css-loader!postcss-loader'，
			query: {
				presets: ['latest'/'es2015'/...]
			}
		}

加入css后处理：npm install postcss-loader --save-dev
配合自动前缀：npm install autoprefixer --save-dev
	使用方法：plugins同级添加 postcss: [
	require('autoprefixer')({
		broswers: ['last 5 versions']
	})
	]
css-loader?importLoaders=1!  ---cssloader传参解决@import css文件问题


------------4.5 less
安装less-loader :  npm i less-loader --save-dev 如果提示你有工具缺失，继续先装less
注意postL要放在cssL之前，less/sass之后
在layer.js import './layer.less'
less没有 @import 问题，不用在cssL传参

另外scss文件用sassL


------------4.6 模板html文件处理
在layer.js > import tpl from './layer.html'  //此方法意思是把模板当成字符串引入，然后在appjs里面调用layerjs返回字符串，再用innerHTML加入页面

安装loader
npm i html-loader --save-dev


------------4.7 处理图片以及其它文件
图片引用情况：1.css引用  2.模板文件里面引用  3.顶层模板文件引用

1.css + 3 (引用相对路径，使用绝对路径也行)
需要 file-loader --save-dev
test: /\.(png|jpg|gif)$/i

2 ： 模板中src="${ require('../../assets/bg.png') }"

htmlL使用query项的name设置输出文件路径

url-loader 与 fileL相似，特别之处是可以在query指定limit：20000，意思是限定某些文件自己处理，变成base64编码，不需要等待请求结果，但会增加文件体积和代码冗余， 
用http请求，这样可以利用浏览器的缓存功能，实际开发要兼顾平衡
实际上query的内容可以这样写 'url-loader?limti=20000' 这种写法在连续使用多个loader时很有用

loaders: ['',''] //从后开始处理

那么变成64编码后如何压缩呢？用 image-webpack-loader -D